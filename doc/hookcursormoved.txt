*hookcursormoved.txt*  Call functions when the cursor position changed
                       Author: Tom Link, micathom at gmail com

This experimental plugin provides some help with the definition of 
functions that should be called when the cursor position changed.

When the cursor position changes, it first checks if a certain condition 
is met and then calls functions registered in 
b:hookcursormoved_{MODE}_{CONDITION} (an array).

In order to define new conditions, you have to set the variable  
"g:hookcursormoved_{CONDITION}" to a function name (STRING). This 
function takes the current mode (i .. insert mode; n ... normal mode) 
as single argument.

Functions are best registered using |hookcursormoved#Register()|.
Example: >

    function! WhatsGoingOn(mode) "{{{3
        if mode == 'i'
            DoThis
        elseif mode == 'n'
            DoThat
        endif
    endf

    call hookcursormoved#Register('syntaxchange', function('WhatsGoingOn'))



-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball (vimscript 
#1502) installed.

This script requires tlib (vimscript #1863) to be installed.


========================================================================
Contents~

        g:hookcursormoved#linechange ................... |g:hookcursormoved#linechange|
        g:hookcursormoved#parenthesis .................. |g:hookcursormoved#parenthesis|
        g:hookcursormoved#parenthesis_round ............ |g:hookcursormoved#parenthesis_round|
        g:hookcursormoved#parenthesis_round_open ....... |g:hookcursormoved#parenthesis_round_open|
        g:hookcursormoved#parenthesis_round_close ...... |g:hookcursormoved#parenthesis_round_close|
        g:hookcursormoved#syntaxchange ................. |g:hookcursormoved#syntaxchange|
        g:hookcursormoved#syntaxleave .................. |g:hookcursormoved#syntaxleave|
        g:hookcursormoved#syntaxleave_oneline .......... |g:hookcursormoved#syntaxleave_oneline|
        hookcursormoved#Enable ......................... |hookcursormoved#Enable()|
        hookcursormoved#Register ....................... |hookcursormoved#Register()|
        hookcursormoved#Test_linechange ................ |hookcursormoved#Test_linechange()|
        hookcursormoved#Test_parenthesis ............... |hookcursormoved#Test_parenthesis()|
        hookcursormoved#Test_parenthesis_round ......... |hookcursormoved#Test_parenthesis_round()|
        hookcursormoved#Test_parenthesis_round_open .... |hookcursormoved#Test_parenthesis_round_open()|
        hookcursormoved#Test_parenthesis_round_close ... |hookcursormoved#Test_parenthesis_round_close()|
        hookcursormoved#Test_syntaxchange .............. |hookcursormoved#Test_syntaxchange()|
        hookcursormoved#Test_syntaxleave ............... |hookcursormoved#Test_syntaxleave()|
        hookcursormoved#Test_syntaxleave_oneline ....... |hookcursormoved#Test_syntaxleave_oneline()|


========================================================================
autoload/hookcursormoved.vim~

                                                    *g:hookcursormoved#linechange*
g:hookcursormoved#linechange   (default: 'hookcursormoved#Test_linechange')
    Modes:
    
    The cursor moved between lines.



                                                    *g:hookcursormoved#parenthesis*
g:hookcursormoved#parenthesis  (default: 'hookcursormoved#Test_parenthesis')
    The cursor is over any kind of parenthesis/bracket/brace.

                                                    *g:hookcursormoved#parenthesis_round*
g:hookcursormoved#parenthesis_round (default: 'hookcursormoved#Test_parenthesis_round')
    The cursor is over (, ).

                                                    *g:hookcursormoved#parenthesis_round_open*
g:hookcursormoved#parenthesis_round_open (default: 'hookcursormoved#Test_parenthesis_round_open')
    The cursor is over (.

                                                    *g:hookcursormoved#parenthesis_round_close*
g:hookcursormoved#parenthesis_round_close (default: 'hookcursormoved#Test_parenthesis_round_close')
    The cursor is over ).

                                                    *g:hookcursormoved#syntaxchange*
g:hookcursormoved#syntaxchange (default: 'hookcursormoved#Test_syntaxchange')
    The cursor moved in/out of a syntax region. 

                                                    *g:hookcursormoved#syntaxleave*
g:hookcursormoved#syntaxleave  (default: 'hookcursormoved#Test_syntaxleave')
    The cursor moved out of a syntax region. The syntax names that are 
    taken into consideration are restricted by the 
    b:hookcursormoved_syntaxleave (LIST) variable.

                                                    *g:hookcursormoved#syntaxleave_oneline*
g:hookcursormoved#syntaxleave_oneline (default: 'hookcursormoved#Test_syntaxleave_oneline')
    Like g:hookcursormoved#syntaxleave but also consider line 
    changes.

                                                    *hookcursormoved#Enable()*
hookcursormoved#Enable(condition)

                                                    *hookcursormoved#Register()*
hookcursormoved#Register(condition, fn, ?mode='ni', ?remove=0)

                                                    *hookcursormoved#Test_linechange()*
hookcursormoved#Test_linechange(mode)

                                                    *hookcursormoved#Test_parenthesis()*
hookcursormoved#Test_parenthesis(mode)

                                                    *hookcursormoved#Test_parenthesis_round()*
hookcursormoved#Test_parenthesis_round(mode)

                                                    *hookcursormoved#Test_parenthesis_round_open()*
hookcursormoved#Test_parenthesis_round_open(mode)

                                                    *hookcursormoved#Test_parenthesis_round_close()*
hookcursormoved#Test_parenthesis_round_close(mode)

                                                    *hookcursormoved#Test_syntaxchange()*
hookcursormoved#Test_syntaxchange(mode)

                                                    *hookcursormoved#Test_syntaxleave()*
hookcursormoved#Test_syntaxleave(mode)

                                                    *hookcursormoved#Test_syntaxleave_oneline()*
hookcursormoved#Test_syntaxleave_oneline(mode)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
